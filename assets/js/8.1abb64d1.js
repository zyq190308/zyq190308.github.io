(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{407:function(s,n,a){s.exports=a.p+"assets/img/nginx.5af15a5f.png"},428:function(s,n,a){"use strict";a.r(n);var t=a(44),i=Object(t.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"前端项目nginx部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端项目nginx部署"}},[s._v("#")]),s._v(" 前端项目NGINX部署")]),s._v(" "),t("h2",{attrs:{id:"安装nginx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装nginx"}},[s._v("#")]),s._v(" 安装NGINX")]),s._v(" "),t("p",[s._v("Mac上可以直接用homebrew来安装")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("brew "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" nginx\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("安装完后就是如下图所示：Docroot是NGINX服务器默认指向的资源路径，'/usr/local/etc/nginx/nginx.conf'是nginx的配置文件。\n"),t("img",{attrs:{src:a(407),alt:"nginx"}})]),s._v(" "),t("h2",{attrs:{id:"nginx-conf配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-conf配置"}},[s._v("#")]),s._v(" nginx.conf配置")]),s._v(" "),t("p",[s._v("通常现在前端项目build后都会生成类似dist或build这样的目录，如果要想构建后文件夹能被nginx服务器识别，就需要修改nginx.conf这个配置文件。\n大致修改如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("br"),t("div",{staticClass:"highlighted"},[s._v(" ")]),t("br"),t("br"),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("server {\n    listen       80;\n    server_name  localhost;\n\n    #charset koi8-r;\n\n    #access_log  logs/host.access.log  main;\n\n    # root 就是你build后的文件夹路径（下面是我电脑上一个项目的路径，直接pwd就可以查看了）\n    location / {\n      root   /Users/zyq/Documents/react-cnode/build;\n      index  index.html index.htm;\n    }\n }\n")])]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("然后nginx -s reload，重启nginx就OK了。")]),s._v(" "),t("h2",{attrs:{id:"nginx代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx代理"}},[s._v("#")]),s._v(" NGINX代理")]),s._v(" "),t("p",[s._v("假如前端项目地址为localhost:8080，后端接口地址为localhost:3000，在部署后请求的接口会404，因为不在同一端口下是找不到对应的接口的，此时NGINX可以作为代理服务器来完成这一功能，一般为了区分前端资源，接口都会加个前缀以示区分，这里我举的例子就是以'api'为前缀，大致如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("br"),t("div",{staticClass:"highlighted"},[s._v(" ")]),t("br"),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("{  \n  # 意思就是遇到/api的时候，就等价于请求了http://localhost:3000/api\n  location /api {\n    proxy_pass http://localhost:3000;\n  }\n}\n")])]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"路由是以history模式匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由是以history模式匹配"}},[s._v("#")]),s._v(" 路由是以history模式匹配")]),s._v(" "),t("p",[s._v("前端项目一般分为hash和history模式，当你路由以history时，本地是正常的，但是当你部署在NGINX后，你会发现只有首页正常，其他都是404，因为这种模式就跟浏览器一样，发现在请求时服务器根本没有这个路径，所以会404，这时候nginx就需要一些配置进行拦截，若果没找到就给他一个默认的文件地址，如下高亮部分：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("div",{staticClass:"highlighted"},[s._v(" ")]),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("location / {\n  root   /Users/zyq/Documents/vue-nginx/dist;\n  try_files $uri $uri/ /index.html;\n}\n")])]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("重启NGINX。")])])}),[],!1,null,null,null);n.default=i.exports}}]);